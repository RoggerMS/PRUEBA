import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Seeding database with feed data...');

  // Create test users
  const users = await Promise.all([
    prisma.user.upsert({
      where: { email: 'maria.garcia@universidad.edu' },
      update: {},
      create: {
        email: 'maria.garcia@universidad.edu',
        name: 'Mar√≠a Garc√≠a',
        username: 'maria_garcia',
        password: await bcrypt.hash('password123', 10),
        university: 'Universidad Nacional',
        career: 'Medicina',
        location: 'Bogot√°, Colombia',
        bio: 'Estudiante de medicina apasionada por la cardiolog√≠a y la investigaci√≥n.',
        verified: true,
        image: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face',
        xp: 1500,
        level: 5,
        showAchievements: true,
        showActivity: true,
        emailNotifications: true,
        pushNotifications: true,
        forumNotifications: true
      }
    }),
    prisma.user.upsert({
      where: { email: 'carlos.rodriguez@tech.edu' },
      update: {},
      create: {
        email: 'carlos.rodriguez@tech.edu',
        name: 'Carlos Rodr√≠guez',
        username: 'carlos_dev',
        password: await bcrypt.hash('password123', 10),
        university: 'Instituto Tecnol√≥gico',
        career: 'Ingenier√≠a de Sistemas',
        location: 'Medell√≠n, Colombia',
        bio: 'Desarrollador full-stack y entusiasta de los algoritmos.',
        verified: false,
        image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',
        xp: 1800,
        level: 6,
        showAchievements: true,
        showActivity: true,
        emailNotifications: true,
        pushNotifications: false,
        forumNotifications: true
      }
    }),
    prisma.user.upsert({
      where: { email: 'ana.martinez@psico.edu' },
      update: {},
      create: {
        email: 'ana.martinez@psico.edu',
        name: 'Ana Mart√≠nez',
        username: 'ana_neuro',
        password: await bcrypt.hash('password123', 10),
        university: 'Universidad de Psicolog√≠a',
        career: 'Psicolog√≠a',
        location: 'Cali, Colombia',
        bio: 'Investigadora en neuroplasticidad y psicolog√≠a cognitiva.',
        verified: true,
        image: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face',
        xp: 2100,
        level: 7,
        showAchievements: true,
        showActivity: false,
        emailNotifications: false,
        pushNotifications: true,
        forumNotifications: true
      }
    })
  ]);

  console.log('‚úÖ Users created:', users.length);

  // Create sample posts
  const posts = [
    {
      content: '¬øCu√°l es la diferencia entre un algoritmo de ordenamiento burbuja y quicksort? Estoy estudiando para mi examen de estructuras de datos y me gustar√≠a entender mejor cu√°ndo usar cada uno. ¬øAlguien puede explicarme con ejemplos pr√°cticos?',
      type: 'QUESTION',
      visibility: 'PUBLIC',
      tags: 'algoritmos,programacion,estructuras-datos,ordenamiento',
      authorId: users[1].id, // Carlos
      createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // 2 days ago
    },
    {
      content: 'Resumen completo sobre el sistema cardiovascular:\n\nü´Ä **Anatom√≠a del coraz√≥n:**\n- 4 c√°maras: 2 aur√≠culas y 2 ventr√≠culos\n- V√°lvulas: tric√∫spide, pulmonar, mitral, a√≥rtica\n\nü©∏ **Circulaci√≥n:**\n- Sist√©mica: coraz√≥n ‚Üí cuerpo ‚Üí coraz√≥n\n- Pulmonar: coraz√≥n ‚Üí pulmones ‚Üí coraz√≥n\n\n‚ö° **Sistema de conducci√≥n:**\n- Nodo sinoauricular (marcapasos natural)\n- Nodo auriculoventricular\n- Haz de His y fibras de Purkinje\n\nüìä **Valores normales:**\n- FC: 60-100 lpm\n- PA: 120/80 mmHg\n- Gasto card√≠aco: 5-6 L/min',
      type: 'TEXT',
      visibility: 'UNIVERSITY',
      tags: 'medicina,cardiologia,anatomia,fisiologia,apuntes',
      authorId: users[0].id, // Mar√≠a
      createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000) // 1 day ago
    },
    {
      content: 'Mi tesis sobre neuroplasticidad est√° tomando forma! üß†‚ú®\n\nDespu√©s de 6 meses de investigaci√≥n, he encontrado evidencia fascinante sobre c√≥mo el cerebro se adapta despu√©s de lesiones. Los resultados preliminares muestran que:\n\nüî¨ La plasticidad sin√°ptica es m√°s activa de lo que pens√°bamos\nüìà Los ejercicios cognitivos espec√≠ficos pueden acelerar la recuperaci√≥n\nüéØ La edad no es una barrera absoluta para la neuroplasticidad\n\nEstoy emocionada de presentar estos hallazgos en el congreso nacional. La neurociencia sigue sorprendi√©ndonos cada d√≠a.\n\n#Neuroplasticidad #Investigaci√≥n #Tesis #Neurociencia',
      type: 'TEXT',
      visibility: 'PUBLIC',
      tags: 'neuroplasticidad,investigacion,tesis,neurociencia,psicologia',
      authorId: users[2].id, // Ana
      createdAt: new Date(Date.now() - 6 * 60 * 60 * 1000) // 6 hours ago
    },
    {
      content: 'Implement√© mi primer algoritmo de b√∫squeda binaria en Python! üêç\n\n```python\ndef busqueda_binaria(arr, objetivo):\n    izquierda, derecha = 0, len(arr) - 1\n    \n    while izquierda <= derecha:\n        medio = (izquierda + derecha) // 2\n        \n        if arr[medio] == objetivo:\n            return medio\n        elif arr[medio] < objetivo:\n            izquierda = medio + 1\n        else:\n            derecha = medio - 1\n    \n    return -1\n```\n\nLa complejidad es O(log n), mucho mejor que la b√∫squeda lineal O(n). ¬øAlguien tiene tips para optimizarlo a√∫n m√°s?',
      type: 'TEXT',
      visibility: 'PUBLIC',
      tags: 'python,algoritmos,busqueda-binaria,programacion,codigo',
      authorId: users[1].id, // Carlos
      createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000) // 3 hours ago
    },
    {
      content: '¬øQu√© t√©cnicas de estudio han funcionado mejor para memorizar la anatom√≠a? Tengo examen de anatom√≠a patol√≥gica la pr√≥xima semana y necesito memorizar muchas estructuras. He probado flashcards pero se me olvida r√°pido.',
      type: 'QUESTION',
      visibility: 'UNIVERSITY',
      tags: 'anatomia,estudio,medicina,tecnicas,memoria',
      authorId: users[0].id, // Mar√≠a
      createdAt: new Date(Date.now() - 1 * 60 * 60 * 1000) // 1 hour ago
    },
    {
      content: 'Reflexi√≥n del d√≠a: La mente humana es incre√≠blemente resiliente. En mis estudios sobre trauma y recuperaci√≥n, he visto c√≥mo las personas pueden superar experiencias devastadoras y salir fortalecidas. La neuroplasticidad no solo se trata de recuperaci√≥n f√≠sica, sino tambi√©n emocional y psicol√≥gica. Cada d√≠a aprendo algo nuevo sobre la capacidad humana de adaptaci√≥n.',
      type: 'TEXT',
      visibility: 'PUBLIC',
      tags: 'psicologia,resilencia,trauma,recuperacion,reflexion',
      authorId: users[2].id, // Ana
      createdAt: new Date(Date.now() - 30 * 60 * 1000) // 30 minutes ago
    }
  ];

  const createdPosts = [];
  for (const postData of posts) {
    const post = await prisma.post.create({
      data: postData
    });
    createdPosts.push(post);
  }

  console.log('‚úÖ Posts created:', createdPosts.length);

  // Create some reactions
  const reactions = [
    { postId: createdPosts[0].id, userId: users[0].id, type: 'FIRE' },
    { postId: createdPosts[0].id, userId: users[2].id, type: 'FIRE' },
    { postId: createdPosts[1].id, userId: users[1].id, type: 'FIRE' },
    { postId: createdPosts[1].id, userId: users[2].id, type: 'FIRE' },
    { postId: createdPosts[2].id, userId: users[0].id, type: 'FIRE' },
    { postId: createdPosts[2].id, userId: users[1].id, type: 'FIRE' },
    { postId: createdPosts[3].id, userId: users[0].id, type: 'FIRE' },
    { postId: createdPosts[4].id, userId: users[1].id, type: 'FIRE' },
    { postId: createdPosts[4].id, userId: users[2].id, type: 'FIRE' },
    { postId: createdPosts[5].id, userId: users[0].id, type: 'FIRE' },
  ];

  for (const reactionData of reactions) {
    await prisma.postReaction.create({
      data: reactionData
    });
  }

  console.log('‚úÖ Reactions created:', reactions.length);

  // Create some comments
  const comments = [
    {
      content: 'Excelente pregunta! QuickSort es generalmente m√°s eficiente con O(n log n) en promedio, mientras que burbuja es O(n¬≤). Te recomiendo usar QuickSort para datasets grandes.',
      postId: createdPosts[0].id,
      authorId: users[0].id
    },
    {
      content: 'Muy buenos apuntes Mar√≠a! Me ayudaron mucho para repasar. ¬øPodr√≠as agregar algo sobre las arritmias m√°s comunes?',
      postId: createdPosts[1].id,
      authorId: users[1].id
    },
    {
      content: '¬°Felicidades Ana! Tu investigaci√≥n suena fascinante. ¬øHas considerado publicar en alguna revista cient√≠fica?',
      postId: createdPosts[2].id,
      authorId: users[0].id
    },
    {
      content: 'Buen c√≥digo Carlos! Una optimizaci√≥n ser√≠a usar b√∫squeda binaria interpolada para datos uniformemente distribuidos.',
      postId: createdPosts[3].id,
      authorId: users[2].id
    },
    {
      content: 'Te recomiendo usar mapas mentales y asociar cada estructura con una imagen visual. A m√≠ me funcion√≥ muy bien!',
      postId: createdPosts[4].id,
      authorId: users[2].id
    }
  ];

  for (const commentData of comments) {
    await prisma.comment.create({
      data: commentData
    });
  }

  console.log('‚úÖ Comments created:', comments.length);

  // Create some bookmarks
  const bookmarks = [
    { postId: createdPosts[1].id, userId: users[1].id }, // Carlos saves Mar√≠a's notes
    { postId: createdPosts[2].id, userId: users[0].id }, // Mar√≠a saves Ana's research
    { postId: createdPosts[3].id, userId: users[0].id }, // Mar√≠a saves Carlos' code
    { postId: createdPosts[1].id, userId: users[2].id }, // Ana saves Mar√≠a's notes
  ];

  for (const bookmarkData of bookmarks) {
    await prisma.bookmark.create({
      data: bookmarkData
    });
  }

  console.log('‚úÖ Bookmarks created:', bookmarks.length);

  console.log('\nüéâ Seed completed successfully!');
  console.log('\nüìä Summary:');
  console.log(`   Users: ${users.length}`);
  console.log(`   Posts: ${createdPosts.length}`);
  console.log(`   Reactions: ${reactions.length}`);
  console.log(`   Comments: ${comments.length}`);
  console.log(`   Bookmarks: ${bookmarks.length}`);
}

main()
  .catch((e) => {
    console.error('‚ùå Seed failed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });