"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/gamification/page",{

/***/ "(app-pages-browser)/./src/services/gamificationService.ts":
/*!*********************************************!*\
  !*** ./src/services/gamificationService.ts ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LEVELS: function() { return /* binding */ LEVELS; },\n/* harmony export */   XP_REWARDS: function() { return /* binding */ XP_REWARDS; },\n/* harmony export */   calculateUserLevel: function() { return /* binding */ calculateUserLevel; },\n/* harmony export */   gamificationService: function() { return /* binding */ gamificationService; },\n/* harmony export */   getXpToNextLevel: function() { return /* binding */ getXpToNextLevel; }\n/* harmony export */ });\n// Configuración de niveles\nconst LEVELS = [\n    {\n        level: 1,\n        name: \"Novato\",\n        minXp: 0,\n        maxXp: 100,\n        rewards: {\n            crolars: 50\n        }\n    },\n    {\n        level: 2,\n        name: \"Aprendiz\",\n        minXp: 100,\n        maxXp: 250,\n        rewards: {\n            crolars: 75\n        }\n    },\n    {\n        level: 3,\n        name: \"Estudiante\",\n        minXp: 250,\n        maxXp: 500,\n        rewards: {\n            crolars: 100,\n            badges: [\n                \"Primer Paso\"\n            ]\n        }\n    },\n    {\n        level: 4,\n        name: \"Dedicado\",\n        minXp: 500,\n        maxXp: 850,\n        rewards: {\n            crolars: 125\n        }\n    },\n    {\n        level: 5,\n        name: \"Comprometido\",\n        minXp: 850,\n        maxXp: 1300,\n        rewards: {\n            crolars: 150,\n            badges: [\n                \"Constancia\"\n            ]\n        }\n    },\n    {\n        level: 6,\n        name: \"Avanzado\",\n        minXp: 1300,\n        maxXp: 1850,\n        rewards: {\n            crolars: 200\n        }\n    },\n    {\n        level: 7,\n        name: \"Experto\",\n        minXp: 1850,\n        maxXp: 2500,\n        rewards: {\n            crolars: 250\n        }\n    },\n    {\n        level: 8,\n        name: \"Maestro\",\n        minXp: 2500,\n        maxXp: 3300,\n        rewards: {\n            crolars: 300,\n            badges: [\n                \"Maestr\\xeda\"\n            ]\n        }\n    },\n    {\n        level: 9,\n        name: \"Sabio\",\n        minXp: 3300,\n        maxXp: 4250,\n        rewards: {\n            crolars: 400\n        }\n    },\n    {\n        level: 10,\n        name: \"Leyenda\",\n        minXp: 4250,\n        maxXp: 5350,\n        rewards: {\n            crolars: 500,\n            badges: [\n                \"Leyenda Acad\\xe9mica\"\n            ]\n        }\n    },\n    {\n        level: 11,\n        name: \"Tit\\xe1n\",\n        minXp: 5350,\n        maxXp: 6600,\n        rewards: {\n            crolars: 600\n        }\n    },\n    {\n        level: 12,\n        name: \"Inmortal\",\n        minXp: 6600,\n        maxXp: 8100,\n        rewards: {\n            crolars: 750,\n            badges: [\n                \"Inmortal del Saber\"\n            ]\n        }\n    },\n    {\n        level: 13,\n        name: \"Divino\",\n        minXp: 8100,\n        maxXp: 10000,\n        rewards: {\n            crolars: 1000\n        }\n    },\n    {\n        level: 14,\n        name: \"Trascendente\",\n        minXp: 10000,\n        maxXp: 12500,\n        rewards: {\n            crolars: 1250,\n            badges: [\n                \"Trascendencia\"\n            ]\n        }\n    },\n    {\n        level: 15,\n        name: \"Omnisciente\",\n        minXp: 12500,\n        maxXp: Infinity,\n        rewards: {\n            crolars: 1500,\n            badges: [\n                \"Omnisciencia\"\n            ]\n        }\n    }\n];\n// Configuración de XP por actividad\nconst XP_REWARDS = {\n    COURSE_LESSON_COMPLETE: 25,\n    COURSE_COMPLETE: 200,\n    CHALLENGE_COMPLETE: 100,\n    FORUM_QUESTION: 15,\n    FORUM_ANSWER: 20,\n    FORUM_BEST_ANSWER: 50,\n    NOTE_UPLOAD: 10,\n    NOTE_SHARED: 5,\n    EVENT_ATTEND: 30,\n    CLUB_JOIN: 20,\n    CLUB_POST: 10,\n    DAILY_STREAK: 15,\n    WEEKLY_STREAK: 100,\n    MONTHLY_STREAK: 500,\n    ACHIEVEMENT_UNLOCK: 50,\n    BADGE_EARN: 25\n};\nclass GamificationService {\n    // Calcular nivel basado en XP\n    calculateLevel(totalXp) {\n        for(let i = LEVELS.length - 1; i >= 0; i--){\n            if (totalXp >= LEVELS[i].minXp) {\n                return LEVELS[i];\n            }\n        }\n        return LEVELS[0];\n    }\n    // Calcular XP necesario para el siguiente nivel\n    getXpToNextLevel(currentXp) {\n        const currentLevel = this.calculateLevel(currentXp);\n        const nextLevel = LEVELS.find((l)=>l.level === currentLevel.level + 1);\n        if (!nextLevel) {\n            return {\n                needed: 0,\n                total: 0\n            };\n        }\n        return {\n            needed: nextLevel.minXp - currentXp,\n            total: nextLevel.minXp - currentLevel.minXp\n        };\n    }\n    // Otorgar XP a un usuario\n    async grantXP(userId, amount, source, sourceId, description) {\n        // En una implementación real, esto interactuaría con la base de datos\n        const user = await this.getUser(userId);\n        const oldLevel = this.calculateLevel(user.totalXp);\n        user.xp += amount;\n        user.totalXp += amount;\n        const newLevel = this.calculateLevel(user.totalXp);\n        const levelUp = newLevel.level > oldLevel.level;\n        const notifications = [];\n        // Notificación de XP ganado\n        notifications.push({\n            id: \"xp_\".concat(Date.now()),\n            userId,\n            type: \"xp_gain\",\n            title: \"XP Ganado\",\n            message: \"Has ganado \".concat(amount, \" XP por \").concat(description),\n            data: {\n                amount,\n                source,\n                sourceId\n            },\n            read: false,\n            createdAt: new Date().toISOString()\n        });\n        // Si subió de nivel\n        if (levelUp) {\n            user.level = newLevel.level;\n            user.crolars += newLevel.rewards.crolars;\n            notifications.push({\n                id: \"level_\".concat(Date.now()),\n                userId,\n                type: \"level_up\",\n                title: \"\\xa1Subiste de Nivel!\",\n                message: \"\\xa1Felicidades! Ahora eres \".concat(newLevel.name, \" (Nivel \").concat(newLevel.level, \")\"),\n                data: {\n                    newLevel,\n                    rewards: newLevel.rewards\n                },\n                read: false,\n                createdAt: new Date().toISOString()\n            });\n            // Otorgar badges de nivel si los hay\n            if (newLevel.rewards.badges) {\n                for (const badgeName of newLevel.rewards.badges){\n                    const badge = await this.grantBadge(userId, badgeName);\n                    if (badge) {\n                        notifications.push({\n                            id: \"badge_\".concat(Date.now(), \"_\").concat(badge.id),\n                            userId,\n                            type: \"badge_earned\",\n                            title: \"\\xa1Nueva Insignia!\",\n                            message: \"Has desbloqueado la insignia: \".concat(badge.name),\n                            data: {\n                                badge\n                            },\n                            read: false,\n                            createdAt: new Date().toISOString()\n                        });\n                    }\n                }\n            }\n        }\n        // Guardar cambios del usuario\n        await this.updateUser(user);\n        // Registrar ganancia de XP\n        await this.logXPGain({\n            id: \"xp_\".concat(userId, \"_\").concat(Date.now()),\n            userId,\n            amount,\n            source,\n            sourceId,\n            description,\n            timestamp: new Date().toISOString()\n        });\n        return {\n            levelUp,\n            newLevel: levelUp ? newLevel : undefined,\n            notifications\n        };\n    }\n    // Otorgar badge a un usuario\n    async grantBadge(userId, badgeName) {\n        const user = await this.getUser(userId);\n        // Verificar si ya tiene el badge\n        if (user.badges.some((b)=>b.name === badgeName)) {\n            return null;\n        }\n        const badge = await this.getBadgeByName(badgeName);\n        if (!badge) return null;\n        badge.earnedAt = new Date().toISOString();\n        user.badges.push(badge);\n        await this.updateUser(user);\n        return badge;\n    }\n    // Verificar y desbloquear logros\n    async checkAchievements(userId) {\n        const user = await this.getUser(userId);\n        const unlockedAchievements = [];\n        // Obtener logros disponibles que el usuario no ha desbloqueado\n        const availableAchievements = await this.getAvailableAchievements(userId);\n        for (const achievement of availableAchievements){\n            if (this.checkAchievementRequirements(user, achievement)) {\n                achievement.earned = true;\n                achievement.earnedDate = new Date().toISOString();\n                // Otorgar recompensas del logro\n                await this.grantXP(userId, achievement.reward.xp, \"achievement\", achievement.id, \"Logro desbloqueado: \".concat(achievement.title));\n                user.crolars += achievement.reward.crolars;\n                if (achievement.reward.badge) {\n                    await this.grantBadge(userId, achievement.reward.badge);\n                }\n                unlockedAchievements.push(achievement);\n            }\n        }\n        if (unlockedAchievements.length > 0) {\n            await this.updateUser(user);\n        }\n        return unlockedAchievements;\n    }\n    // Verificar requisitos de un logro\n    checkAchievementRequirements(user, achievement) {\n        switch(achievement.id){\n            case \"first_course\":\n                return user.stats.coursesCompleted >= 1;\n            case \"course_master\":\n                return user.stats.coursesCompleted >= 10;\n            case \"challenge_warrior\":\n                return user.stats.challengesCompleted >= 5;\n            case \"forum_helper\":\n                return user.stats.forumAnswers >= 10;\n            case \"streak_keeper\":\n                return user.streak.current >= 7;\n            case \"social_butterfly\":\n                return user.stats.friendsCount >= 20;\n            case \"knowledge_sharer\":\n                return user.stats.notesUploaded >= 50;\n            case \"event_enthusiast\":\n                return user.stats.eventsAttended >= 5;\n            case \"club_leader\":\n                return user.stats.clubsJoined >= 3;\n            case \"study_marathon\":\n                return user.stats.totalStudyTime >= 1000 // 1000 minutos\n                ;\n            default:\n                return false;\n        }\n    }\n    // Actualizar racha diaria\n    async updateDailyStreak(userId) {\n        const user = await this.getUser(userId);\n        const today = new Date().toDateString();\n        const lastActivity = new Date(user.streak.lastActivity).toDateString();\n        const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toDateString();\n        const notifications = [];\n        if (lastActivity === today) {\n            // Ya registró actividad hoy\n            return {\n                streakUpdated: false,\n                notifications\n            };\n        }\n        if (lastActivity === yesterday) {\n            // Continúa la racha\n            user.streak.current += 1;\n            user.streak.lastActivity = new Date().toISOString();\n            if (user.streak.current > user.streak.longest) {\n                user.streak.longest = user.streak.current;\n            }\n            // Otorgar XP por racha\n            let xpReward = XP_REWARDS.DAILY_STREAK;\n            if (user.streak.current % 7 === 0) {\n                xpReward = XP_REWARDS.WEEKLY_STREAK;\n            } else if (user.streak.current % 30 === 0) {\n                xpReward = XP_REWARDS.MONTHLY_STREAK;\n            }\n            const xpResult = await this.grantXP(userId, xpReward, \"streak\", \"daily\", \"Racha de \".concat(user.streak.current, \" d\\xedas\"));\n            notifications.push(...xpResult.notifications);\n            // Notificación de racha\n            if (user.streak.current % 7 === 0) {\n                notifications.push({\n                    id: \"streak_\".concat(Date.now()),\n                    userId,\n                    type: \"streak_milestone\",\n                    title: \"\\xa1Racha Semanal!\",\n                    message: \"\\xa1Incre\\xedble! Has mantenido una racha de \".concat(user.streak.current, \" d\\xedas\"),\n                    data: {\n                        streak: user.streak.current\n                    },\n                    read: false,\n                    createdAt: new Date().toISOString()\n                });\n            }\n        } else {\n            // Se rompió la racha\n            user.streak.current = 1;\n            user.streak.lastActivity = new Date().toISOString();\n        }\n        await this.updateUser(user);\n        return {\n            streakUpdated: true,\n            notifications\n        };\n    }\n    // Métodos auxiliares (en una implementación real, estos interactuarían con la base de datos)\n    async getUser(userId) {\n        // Implementación mock - en producción vendría de la base de datos\n        throw new Error(\"Method not implemented - requires database integration\");\n    }\n    async updateUser(user) {\n        // Implementación mock - en producción actualizaría la base de datos\n        throw new Error(\"Method not implemented - requires database integration\");\n    }\n    async logXPGain(xpGain) {\n        // Implementación mock - en producción guardaría en la base de datos\n        throw new Error(\"Method not implemented - requires database integration\");\n    }\n    async getBadgeByName(name) {\n        // Implementación mock - en producción vendría de la base de datos\n        throw new Error(\"Method not implemented - requires database integration\");\n    }\n    async getAvailableAchievements(userId) {\n        // Implementación mock - en producción vendría de la base de datos\n        throw new Error(\"Method not implemented - requires database integration\");\n    }\n}\nconst gamificationService = new GamificationService();\n// Exportar funciones de utilidad\nconst calculateUserLevel = (totalXp)=>{\n    for(let i = LEVELS.length - 1; i >= 0; i--){\n        if (totalXp >= LEVELS[i].minXp) {\n            return LEVELS[i];\n        }\n    }\n    return LEVELS[0];\n};\nconst getXpToNextLevel = (currentXp)=>{\n    const currentLevel = calculateUserLevel(currentXp);\n    const nextLevel = LEVELS.find((l)=>l.level === currentLevel.level + 1);\n    if (!nextLevel) {\n        return {\n            needed: 0,\n            total: 0\n        };\n    }\n    return {\n        needed: nextLevel.minXp - currentXp,\n        total: nextLevel.minXp - currentLevel.minXp\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/gamificationService.ts\n"));

/***/ })

});